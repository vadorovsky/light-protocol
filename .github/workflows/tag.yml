name: Auto Tag Release

on:
  push:
    branches:
      - main

jobs:
  auto-tag:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Auto Tag
        shell: bash
        run: |
          function rust_version() {
            cargo pkgid -p $1 | cut -d "@" -f2
          }

          function ts_version() {
            pnpm list --filter $1 --depth 0 --json | jq -r '.[0].version'
          }

          COMMIT_MESSAGE=$(git log -1 --pretty=format:'%s')
          if [[ "$COMMIT_MESSAGE" == *"bump version of"* ]]; then
            CHANGED_FILES=$(git --no-pager show @ --name-only)
            echo "$CHANGED_FILES"
            PACKAGE_NAME=""
            VERSION=""

            if [[ "$CHANGED_FILES" == *"circuit-lib/circuit-lib.js"* ]]; then
              PACKAGE_NAME="circuit-lib.js"
              VERSION=$(ts_version $PACKAGE_NAME)
            elif [[ "$CHANGED_FILES" == *"cli"* ]]; then
              PACKAGE_NAME="cli"
              VERSION=$(ts_version $PACKAGE_NAME)
            elif [[ "$CHANGED_FILES" == *"js/compressed-token"* ]]; then
              PACKAGE_NAME="compressed-token"
              VERSION=$(ts_version $PACKAGE_NAME)
            elif [[ "$CHANGED_FILES" == *"js/stateless.js"* ]]; then
              PACKAGE_NAME="stateless.js"
              VERSION=$(ts_version $PACKAGE_NAME)
            elif [[ "$CHANGED_FILES" == *"prover.js"* ]]; then
              PACKAGE_NAME="prover.js"
              VERSION=$(ts_version $PACKAGE_NAME)
            elif [[ "$CHANGED_FILES" == *"macros/aligned-sized"* ]]; then
              PACKAGE_NAME="aligned-sized"
              VERSION=$(rust_version $PACKAGE_NAME)
            elif [[ "$CHANGED_FILES" == *"macros/light"* ]]; then
              PACKAGE_NAME="light-macros"
              VERSION=$(rust_version $PACKAGE_NAME)
            elif [[ "$CHANGED_FILES" == *"merkle-tree/bounded-vec"* ]]; then
              PACKAGE_NAME="light-bounded-vec"
              VERSION=$(rust_version $PACKAGE_NAME)
            elif [[ "$CHANGED_FILES" == *"merkle-tree/concurrent"* ]]; then
              PACKAGE_NAME="light-concurrent-merkle-tree"
              VERSION=$(rust_version $PACKAGE_NAME)
            elif [[ "$CHANGED_FILES" == *"merkle-tree/hash-set"* ]]; then
              PACKAGE_NAME="light-hash-set"
              VERSION=$(rust_version $PACKAGE_NAME)
            elif [[ "$CHANGED_FILES" == *"merkle-tree/hasher"* ]]; then
              PACKAGE_NAME="light-hasher"
              VERSION=$(rust_version $PACKAGE_NAME)
            elif [[ "$CHANGED_FILES" == *"merkle-tree/indexed"* ]]; then
              PACKAGE_NAME="light-indexed-merkle-tree"
              VERSION=$(rust_version $PACKAGE_NAME)
            elif [[ "$CHANGED_FILES" == *"merkle-tree/reference"* ]]; then
              PACKAGE_NAME="light-merkle-tree-reference"
              VERSION=$(rust_version $PACKAGE_NAME)
            elif [[ "$CHANGED_FILES" == *"programs/account-compression"* ]]; then
              PACKAGE_NAME="account-compression"
              VERSION=$(rust_version $PACKAGE_NAME)
            elif [[ "$CHANGED_FILES" == *"programs/compressed-pda"* ]]; then
              PACKAGE_NAME="light-compressed-pda"
              VERSION=$(rust_version $PACKAGE_NAME)
            elif [[ "$CHANGED_FILES" == *"programs/compressed-token"* ]]; then
              PACKAGE_NAME="light-compressed-token"
              VERSION=$(rust_version $PACKAGE_NAME)
            elif [[ "$CHANGED_FILES" == *"programs/registry"* ]]; then
              PACKAGE_NAME="light-registry"
              VERSION=$(rust_version $PACKAGE_NAME)
            fi

            if [[ -n "$PACKAGE_NAME" ]]; then
              echo "Creating tag for package: $PACKAGE_NAME"

              NEW_TAG="v$(cargo metadata --format-version=1  | jq -r ".packages[] | select(.name == \"$PACKAGE_NAME\") | .version" | head -n 1)"
              git config user.name "GitHub Actions"
              git config user.email "github-actions@github.com"
              git tag "${PACKAGE_NAME}-${NEW_TAG}"
              git push origin "${PACKAGE_NAME}-${NEW_TAG}"
            fi
          fi
