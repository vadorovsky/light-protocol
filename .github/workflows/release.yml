name: Release

on:
  push:
    branches:
      - main

jobs:
  auto-tag:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Setup pnpm
        uses: pnpm/action-setup@v2.4.0
        with:
          version: 8
          run_install: false

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable

      - name: Extract version
        id: version
        shell: bash
        run: |
          set -eux

          function rust_version() {
            cargo pkgid -p $1 | cut -d "@" -f2
          }

          function ts_version() {
            pnpm list --filter $1 --depth 0 --json | jq -r '.[0].version'
          }

          COMMIT_MESSAGE=$(git log -1 --pretty=format:'%s')
          PACKAGE=""
          VERSION=""
          LANGUAGE=""

          if [[ "$COMMIT_MESSAGE" == *"bump version of"* ]]; then
            PACKAGE=$(echo "$COMMIT_MESSAGE" | grep -o "bump version of [^ ]*" | cut -d " " -f4)

            if [[ -n "$PACKAGE_NAME" ]]; then
              # First try getting the Rust version.
              VERSION=$(rust_version "$PACKAGE_NAME")
              LANGUAGE="rust"
              if [[ -z "$VERSION" ]]; then
                # If no version was found, try the TypeScript version.
                VERSION=$(ts_version "$PACKAGE_NAME")
                LANGUAGE="ts"
              fi
            fi

            if [[ -z "$VERSION" ]] || [[ -z "$LANGUAGE" ]]; then
              echo "Could not detect the version ($VERSION) or language ($LANGUAGE) of project $PROJECT"
            fi
          fi

          echo "package=$PACKAGE" >> "$GITHUB_OUTPUT"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "language=$LANGUAGE" >> "$GITHUB_OUTPUT"

      - name: Tag
        id: tag
        if: ${{ steps.version.outputs.version }}
        env:
          VERSION: ${{ steps.version.outputs.version }}
        run: |
          echo "Creating tag for package: $PACKAGE_NAME v$VERSION"

          NEW_TAG="v$VERSION"
          git config user.name "GitHub Actions"
          git config user.email "github-actions@github.com"
          git tag "${PACKAGE_NAME}-${NEW_TAG}"
          git push origin "${PACKAGE_NAME}-${NEW_TAG}"

      - name: Release Rust
        if: ${{ steps.version.outputs.language }} == "rust"
        shell: bash
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}
          PACKAGE: ${{ steps.version.outputs.package }}
        run: |
          # Check whether we are building an on-chain program. If yes, prepare
          # an artifact.
          ARTIFACT=""
          if [[ "$ARTIFACT" == *"account-compression"* ]]; then
            ARTIFACT="account_compression.so"
          elif [[ "$ARTIFACT" == *"light-compressed-pda"* ]]; then
            ARTIFACT="light_compressed_pda.so"
          elif [[ "$ARTIFACT" == *"light-compressed-token"* ]]; then
            ARTIFACT="light_compressed_token.so"
          elif [[ "$ARTIFACT" == *"light-user-registry"* ]]; then
            ARTIFACT="light_user_registry.so"
          elif [[ "$ARTIFACT" == *"light-registry"* ]]; then
            ARTIFACT="light_registry.so"
          fi
          echo "artifact=$ARTIFACT" >> "$GITHUB_OUTPUT"
          if [[ -n "$ARTIFACT" ]]; then
            anchor build -p "$PACKAGE"
          fi

          cargo publish \
            -p "${{ steps.extract-crate.outputs.crate }}" \
            --token "$CARGO_REGISTRY_TOKEN"

      - name: Release TypeScript
        if: ${{ steps.version.outputs.language }} == "ts"
        shell: bash
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_ACCESS_TOKEN }}
          NPM_CONFIG_PROVENANCE: true
          PACKAGE: ${{ steps.version.outputs.package }}
        run: |
            SUBDIR=$(grep "$PACKAGE" pnpm-workspace.yaml | awk -F '"' '{gsub("/\\*\\*", "", $2); print $2}')
            cd "$SUBDIR"
            pnpm publish --access public --no-git-checks

      - name: GitHub release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          token: ${{ secrets.PAT_TOKEN }}
          files: |
            "${{ steps.extract-crate.outputs.artifact }}"
